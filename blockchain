import hashlib
import time

# Blok sınıfı (Block class)
class Block:
    def __init__(self, index, previous_hash, timestamp, data, hash):
        self.index = index
        self.previous_hash = previous_hash
        self.timestamp = timestamp
        self.data = data
        self.hash = hash

# Blockchain sınıfı (Blockchain class)
class Blockchain:
    def __init__(self):
        self.chain = []
        self.create_genesis_block()

    def create_genesis_block(self):
        # Genesis blok (ilk blok)
        genesis_block = Block(0, "0", time.time(), "Genesis Block", self.calculate_hash(0, "0", time.time(), "Genesis Block"))
        self.chain.append(genesis_block)

    def calculate_hash(self, index, previous_hash, timestamp, data):
        # Verilen verilerle hash hesaplama (SHA-256)
        return hashlib.sha256(f"{index}{previous_hash}{timestamp}{data}".encode('utf-8')).hexdigest()

    def add_block(self, data):
        # Yeni bir blok ekleme
        last_block = self.chain[-1]
        index = last_block.index + 1
        timestamp = time.time()
        hash = self.calculate_hash(index, last_block.hash, timestamp, data)
        new_block = Block(index, last_block.hash, timestamp, data, hash)
        self.chain.append(new_block)

    def is_valid(self):
        # Blockchain geçerliliğini kontrol etme
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i - 1]

            # Geçerli hash hesapla ve önceki blok hash ile karşılaştır
            if current_block.hash != self.calculate_hash(current_block.index, current_block.previous_hash, current_block.timestamp, current_block.data):
                return False

            # Önceki blok hash ile karşılaştır
            if current_block.previous_hash != previous_block.hash:
                return False

        return True

    def print_chain(self):
        # Blockchain'i yazdır
        for block in self.chain:
            print(f"Block #{block.index} - Hash: {block.hash} - Previous Hash: {block.previous_hash}")
            print(f"Timestamp: {block.timestamp}")
            print(f"Data: {block.data}")
            print("-" * 50)

# Blockchain oluşturma
my_blockchain = Blockchain()

# Yeni bloklar ekleyelim
my_blockchain.add_block("Block 1 data")
my_blockchain.add_block("Block 2 data")
my_blockchain.add_block("Block 3 data")

# Blockchain'i yazdır
my_blockchain.print_chain()

# Blockchain geçerli mi kontrol et
print("Blockchain geçerli mi?", "Evet" if my_blockchain.is_valid() else "Hayır")
